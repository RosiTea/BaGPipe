includeConfig "https://raw.githubusercontent.com/nf-core/configs/master/conf/sanger.config"
//includeConfig "sanger.config"

// Pipeline input parameters
params {
    manifest = ""
    genus = ""
    phenotypes = ""
    antibiotic = ""
    outdir = "./output"
}

manifest {
    name            = "bgwas_pipeline"
    author          = 'Charles Wei'
    homePage        = 'https://gitlab.internal.sanger.ac.uk/kw20/bgwas_pipeline'
    description     = 'Take genome assemblies to perform GWAS in one pipeline'
    mainScript      = 'main.nf'
    nextflowVersion = '>=23.10.0'
    version         = '1.0.0'
}

/**
* Function to ensure that resource requirements don't go beyond
* a maximum limit
*/
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

def escalate_linear(initial, task, multiplier=1) {
    assert multiplier > 0
    return (initial * multiplier * task.attempt)
}

def escalate_exp(initial, task, multiplier=1) {
    assert multiplier > 0
    return (initial * (multiplier ** (task.attempt - 1)))
}

def escalate_queue_time(queue, task) {
    def queue_index = [
        "normal": 0,
        "long": 1,
        "week": 2,
        "basement": 3,
    ]
    def times = [12, 48, 168, 720]
    def index = queue_index[queue] + (task.attempt - 1)
    if (index < 4) {
        return "${times[index]}.h"
    }
    return "${times[3]}.h"
}

def retry_strategy(task, max_retries) {
    def MISC_EXIT_CODES = [
        "SIGKILL": 137,
        "SIGTERM": 143,
        "SIGABRT": 134,
        "SIGSEGV": 139
    ].values()

    def SCALING_EXIT_CODES = [
        "SIGINT": 130,  // LSF Out of memory Error or bkill
        "SIGUSR2": 140, // LSF Runlimit exceeded Error
    ].values()

    if (task.attempt > max_retries) {
        return 'ignore'
    }

    switch(task.exitStatus) {
        case {it in MISC_EXIT_CODES}:
            // Ignore due to non-scalable error code
            return 'ignore'

        case {it in SCALING_EXIT_CODES}:
            // Retry with more memory and longer time limit
            return 'retry'

        default:
            // Ignore any other error codes
            return 'ignore'
    }
}

process {

    // Defaults
    cpus   = { check_max( escalate_linear( 1, task ), 'cpus' ) }
    memory = { check_max( escalate_linear( 1.GB, task ), 'memory' ) }
    time   = { check_max( escalate_linear( 1.h, task ), 'time' ) }

    withName:PanarooAnalysis{
        cpus = 8
        memory = { check_max( escalate_linear( 2.GB, task ), 'memory' ) }
        time = { check_max( escalate_linear( 12.h, task ), 'time' ) }
    }

    withName:PyseerKinshipMatrix{
        container = 'quay.io/rositea/tea'
    }
}

singularity {
    enabled = true
}
